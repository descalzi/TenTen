{"version":3,"sources":["theme-context.tsx","Atoms/index.tsx","TopBar/index.tsx","styles.tsx","const.tsx","PlayArea/index.tsx","helpers.tsx","App.tsx"],"names":["ThemeContext","React","createContext","theme","toggleTheme","pressTrackerAtom","atom","disableTrackerAtom","allSquaresAtom","sessionScoreAtom","displayScoreAtom","highScoreAtom","atomWithStorage","resetGameFlagAtom","ThemeIcon","props","themeContext","useContext","name","AwardIcon","ReloadIcon","TopBar","useAtom","displayScore","highScore","useAtomValue","setResetGameFlag","useSetAtom","alignment","title","subtitle","accessoryLeft","Fragment","icon","accessoryRight","onPress","playAreaStyles","StyleService","create","container","flex","flexDirection","alignItems","subcontainer","overflowX","modalContainer","margin","borderRadius","borderWidth","modalView","padding","backgroundColor","row","column","square_base","width","height","justifyContent","square_unpressed","borderColor","color","square_pressed","square_disabled","cursor","backdrop","COL_BASE","Array","from","map","SingleSquare","styles","useStyleSheet","useState","isActive","setIsActive","isDisabled","setIsDisabled","pressTracker","setPressTracker","disableTracker","setDisableTracker","sessionScore","setSessionScore","setDisplayScore","setHighScore","useEffect","includes","data","isPressAboveLimit","useCallback","value","console","info","log","isPressFullScore","addToTracker","prev","concat","delFromTracker","newTracker","index","indexOf","splice","increaseScore","addScore","resetScore","increaseDisplayScore","checkAndAction","squaresDone","length","handlePress","col","Pressable","style","SquareRow","setAllSquares","allSquares","keys","forEach","squareValue","Math","floor","random","squareData","push","View","AllSquares","resetGameFlag","AllRowsAndCols","useMemo","PlayArea","completedRow","setCompletedRow","completedCol","setCompletedCol","completedGame","setCompletedGame","modalRowVisible","setModalRowVisible","modalColVisible","setModalColVisible","confettiRef","useRef","resetGame","current","start","position","remainingCombos","arr","number","powerset","powerSet","lastElement","pop","restPowerset","i","set","slice","subsets","subset","sum","j","sumEquals","filter","square","setTimeout","visible","disabled","category","backdropStyle","onBackdropPress","count","origin","x","y","autoStart","fadeOut","ref","HomeScreen","SafeAreaView","level","setTheme","icons","EvaIconsPack","Provider","eva"],"mappings":"qLAcaA,EAAeC,IAAMC,cAAc,CAC9CC,MAAO,QACPC,YAAa,e,iBCNFC,EAAmBC,eAAuB,IAC1CC,EAAqBD,eAAuB,IAC5CE,EAAiBF,eAAuB,IAExCG,EAAmBH,eAAa,GAChCI,EAAmBJ,eAAa,GAChCK,EAAgBC,0BAAwB,YAAa,GAErDC,EAAoBP,gBAAc,G,ykBCJ/C,IAAMQ,EAAY,SAACC,GACf,IAAMC,EAAef,IAAMgB,WAAWjB,GACtC,OAAO,cAAC,OAAI,OAAKe,GAAK,IAAEG,KAA6B,UAAvBF,EAAab,MAAoB,MAAQ,WAGrEgB,EAAY,SAACJ,GACMd,IAAMgB,WAAWjB,GACtC,OAAO,cAAC,OAAI,OAAKe,GAAK,IAAEG,KAAK,YAG3BE,EAAa,SAACL,GACKd,IAAMgB,WAAWjB,GACtC,OAAO,cAAC,OAAI,OAAKe,GAAK,IAAEG,KAAK,cAGpBG,EAAS,WAClB,IAAML,EAAef,IAAMgB,WAAWjB,GACtC,EAAwCsB,kBAAQZ,GAAiB,WAA1Da,EAAY,KACbC,GAD8B,KAClBC,uBAAad,IACzBe,EAAmBC,qBAAWd,GAgBpC,OACI,cAAC,gBAAa,CACVe,UAAU,SACVC,MAAM,UACNC,SAAQ,cAAgBN,EACxBO,cAnBe,WAAH,OAChB,eAAC,IAAMC,SAAQ,WACX,cAAC,sBAAmB,CAACC,KAAMd,IAC3B,eAAC,OAAI,WAAC,UAAQI,SAiBdW,eAbgB,WAAH,OACjB,eAAC,IAAMF,SAAQ,WACX,cAAC,sBAAmB,CAACC,KAAMnB,EAAWqB,QAASnB,EAAaZ,cAC5D,cAAC,sBAAmB,CAAC6B,KAAMb,EAAYe,QAAS,kBAAMT,GAAiB,a,iCC3CtEU,EAAiBC,eAAaC,OAAO,CAC9CC,UAAW,CACPC,KAAM,EACNC,cAAe,SACfC,WAAY,WAEhBC,aAAc,CACVF,cAAe,SACfC,WAAY,SACZE,UAAW,UAEfC,eAAgB,CACZC,OAAQ,EACRC,aAAc,GACdC,YAAa,GAEjBC,UAAW,CACPC,QAAS,GACTH,aAAc,GACdC,YAAa,EACbG,gBAAiB,yBAErBC,IAAK,CACDX,cAAe,OAEnBY,OAAQ,CACJZ,cAAe,UAEnBa,YAAa,CACTC,MAAO,OACPC,OAAQ,OACRd,WAAY,SACZe,eAAgB,SAChBT,YAAa,EACbD,aAAc,EACdD,OAAQ,OAEZY,iBAAkB,CACdC,YAAa,wBACbR,gBAAiB,gCACjBS,MAAO,yBAEXC,eAAgB,CACZF,YAAa,wBACbR,gBAAiB,gCACjBS,MAAO,yBAEXE,gBAAiB,CACbH,YAAa,uBACbR,gBAAiB,8BACjBS,MAAO,uBACPG,OAAQ,WAEZC,SAAU,CACNb,gBAAiB,wBCtDZc,EAAsBC,MAAMC,KAAKD,MAFjB,KAEuCE,KAAI,kBAAM,K,GACrCF,MAAMC,KAAKD,MAFvB,KAE6CE,KAAI,kBAAKH,K,QCkB7EI,EAAe,SAACtD,GAClB,IAAMuD,EAASC,wBAAcnC,GAC7B,EAAgCnC,IAAMuE,UAAkB,GAAM,WAAvDC,EAAQ,KAAEC,EAAW,KAC5B,EAAoCzE,IAAMuE,UAAkB,GAAM,WAA3DG,EAAU,KAAEC,EAAa,KAChC,EAAwCtD,kBAAQjB,GAAiB,WAA1DwE,EAAY,KAAEC,EAAe,KACpC,EAA4CxD,kBAAQf,GAAmB,WAAhEwE,EAAc,KAAEC,EAAiB,KACxC,EAAwC1D,kBAAQb,GAAiB,WAA1DwE,EAAY,KAAEC,EAAe,KACpC,EAAwC5D,kBAAQZ,GAAiB,WAA1Da,EAAY,KAAE4D,EAAe,KACpC,EAAkC7D,kBAAQX,GAAc,WAAjDa,EAAS,KAAE4D,EAAY,KAE9BnF,IAAMoF,WAAU,WACZX,EAAYG,EAAaS,SAASvE,EAAMwE,OACxCX,EAAcG,EAAeO,SAASvE,EAAMwE,SAC7C,CAACV,EAAc9D,IAElB,IAAMyE,EAAoBvF,IAAMwF,aAC5B,SAACC,GAEG,OADAC,QAAQC,KAAK,cAAeX,EAAcS,GACtCT,EAAeS,EAAQ,KACvBC,QAAQE,IAAI,2BACL,KAIf,CAACZ,IAGCa,EAAmB7F,IAAMwF,aAC3B,SAACC,GAEG,OADAC,QAAQC,KAAK,cAAeX,EAAcS,GACtCT,EAAeS,IAAU,KACzBC,QAAQE,IAAI,6BACL,KAIf,CAACZ,IAGCc,EAAe9F,IAAMwF,aACvB,SAACF,GACGT,GAAgB,SAACkB,GAEb,OADmB,IAAIA,GAAMC,OAAOV,QAI5C,CAACT,EAAiBD,EAAcK,EAAiBD,IAG/CiB,EAAiBjG,IAAMwF,aACzB,SAACF,GACGL,GAAgB,SAACc,GAAY,OAAKA,EAAOT,EAAKG,SAC9CZ,GAAgB,SAACkB,GACb,IAAMG,EAAU,IAAOH,GACjBI,EAAQD,EAAWE,QAAQd,GAEjC,OADAY,EAAWG,OAAOF,EAAO,GAClBD,OAGf,CAACjB,EAAiBJ,IAGhByB,EAAgBtG,IAAMwF,aACxB,SAACe,GACGtB,GAAgB,SAACc,GAAY,OAAKA,EAAOQ,OAE7C,CAACtB,IAGCuB,EAAaxG,IAAMwF,aAAY,WACjCP,EAAgB,KACjB,CAACA,IAEEwB,EAAuBzG,IAAMwF,aAC/B,SAACe,GACGrB,GAAgB,SAACa,GAAY,OAAKA,EAAOQ,KACrCjF,EAAeiF,EAAWhF,GAAW4D,EAAa7D,EAAeiF,KAEzE,CAACrB,EAAiB5D,EAAcC,EAAW4D,IAGzCuB,EAAiB1G,IAAMwF,aACzB,SAACF,GACG,IAAIC,EAAkBD,EAAKG,OAA3B,CACA,GAAII,EAAiBP,EAAKG,OAAQ,CAC9BC,QAAQE,IAAI,6DAEZ,IAAMe,EAAc,IAAI/B,GAAcoB,OAAOV,GAM7C,OALAP,GAAkB,SAACgB,GAAsB,OAAKA,EAAKC,OAAOW,MAC1D9B,EAAgB,IAEhB4B,EAAqBzB,EAAeM,EAAKG,MAAQkB,EAAYC,aAC7DJ,IAGJV,EAAaR,GACbgB,EAAchB,EAAKG,UAEvB,CACIF,EACAM,EACAS,EACAR,EACAU,EACA5B,EACAI,IAIF6B,EAAc7G,IAAMwF,aACtB,SAACF,GAUG,OATAI,QAAQE,IACJ,kBACAN,EAAKG,MACL,UACAH,EAAKnC,IACLmC,EAAKwB,IACLlC,EAAagC,QAGbhC,EAAaS,SAASC,IACtBI,QAAQE,IAAI,wBACZK,EAAeX,IAIdV,EAAagC,OAMU,IAAxBhC,EAAagC,QACblB,QAAQE,IAAI,sCACRhB,EAAa,GAAGzB,MAAQmC,EAAKnC,KAAOyB,EAAa,GAAGkC,MAAQxB,EAAKwB,KACjEJ,EAAepB,MAIvBI,QAAQE,IAAI,+CACRhB,EAAa,GAAGzB,MAAQyB,EAAa,GAAGzB,KAAOyB,EAAa,GAAGzB,MAAQmC,EAAKnC,OAI5EyB,EAAa,GAAGkC,MAAQlC,EAAa,GAAGkC,KAAOlC,EAAa,GAAGkC,MAAQxB,EAAKwB,MAH5EJ,EAAepB,MAdfI,QAAQE,IAAI,sBACZc,EAAepB,MAqBvB,CAACV,EAAcC,IAGnB,OACI,cAACkC,EAAA,QAAS,CACNC,MAAO,CACH3C,EAAOhB,YACPmB,EACMH,EAAOT,eACPc,EACAL,EAAOR,gBACPQ,EAAOZ,kBAEjBvB,QAAS,kBAAOwC,GAAcmC,EAAY/F,EAAMwE,OAAM,SAErDxE,EAAMwE,KAAKG,SAQlBwB,EAAY,SAACnG,GACf,IAAMoG,EAAgBxF,qBAAWnB,GAE7B4G,EAA+B,GAcnC,OAZAlD,MAAMC,KAAKD,MDtMc,ICsMOmD,QAAQC,SAAQ,SAAClB,GAC7C,IAAMmB,EAAsBC,KAAKC,MAAsB,GAAhBD,KAAKE,WAAkB,EACxDC,EAA6B,CAC/BvE,IAAKrC,EAAMqC,IACX2D,IAAKX,EAAQ,EACbV,MAAO6B,GAEXH,EAAWQ,KAAKD,MAGpBR,EAAcC,GAGV,cAACS,EAAA,QAAI,CAACZ,MAAO7E,EAAegB,IAAI,SAC5B,mCACKgE,EAAWhD,KAAI,SAACuD,EAA4BvB,GACzC,OAAO,cAAC,EAAY,CAAab,KAAMoC,GAAbvB,WAOxC0B,EAAa,WACf,IAAMC,EAAgBtG,uBAAaZ,GAC7BmH,EAAiB/H,IAAMgI,SAAQ,WACjC,OACI,mCACK/D,MAAMC,KAAKD,MDjOC,ICiOoBmD,QAAQjD,KAAI,SAACgC,GAC1C,OAAO,cAAC,EAAS,CAAsBhD,IAAKgD,EAAQ,GAAE,OAAxBA,UAI3C,CAAC2B,IAEJ,OAAO,cAACF,EAAA,QAAI,CAACZ,MAAO7E,EAAeiB,OAAO,SAAE2E,KAGnCE,EAAW,WACpB,MAAwCjI,IAAMuE,SAAmB,IAAG,WAA7D2D,EAAY,KAAEC,EAAe,KACpC,EAAwCnI,IAAMuE,SAAmB,IAAG,WAA7D6D,EAAY,KAAEC,EAAe,KACpC,EAA0CrI,IAAMuE,UAAkB,GAAM,WAAjE+D,EAAa,KAAEC,EAAgB,KAChC1D,EAAkBnD,qBAAWtB,GACnC,EAA4CiB,kBAAQf,GAAmB,WAAhEwE,EAAc,KAAEC,EAAiB,KAClCoC,EAAa3F,uBAAajB,GAC1B0E,EAAkBvD,qBAAWlB,GAC7B0E,EAAkBxD,qBAAWjB,GACnC,EAA0CY,kBAAQT,GAAkB,WAA7DkH,EAAa,KAAErG,EAAgB,KACtC,EAA8CzB,IAAMuE,UAAkB,GAAM,WAArEiE,EAAe,KAAEC,EAAkB,KAC1C,EAA8CzI,IAAMuE,UAAkB,GAAM,WAArEmE,EAAe,KAAEC,EAAkB,KAEpCC,EAAc5I,IAAM6I,SAEpBC,EAAY9I,IAAMwF,aAAY,WAChCX,EAAgB,IAChBE,EAAkB,IAClBE,EAAgB,GAChBC,EAAgB,GAChBiD,EAAgB,IAChBE,EAAgB,IAChB3C,QAAQE,IAAI,cACZnE,GAAiB,GACjB8G,GAAiB,KAClB,IA8DH,OA5DAvI,IAAMoF,WAAU,WACR0C,GAAegB,MACpB,CAAChB,EAAegB,IAEnB9I,IAAMoF,WAAU,YACPgD,EAAaxB,QAAWsB,EAAatB,SACrCgC,EAAYG,SACjBH,EAAYG,QAAQC,UACrB,CAACZ,EAAcF,EAAcU,IAEhC5I,IAAMoF,WAAU,WACRN,EAAe8B,QAEf3C,MAAMC,KAAKD,MAAM,IAAImD,QAAQC,SAAQ,SAAC4B,GAClC,IAGMC,ECzPG,SAACC,EAAeC,GAOrC,IALA,IAAIC,EAjCS,SAAXC,EAAYH,GAEd,GAAmB,IAAfA,EAAIvC,OACJ,MAAO,CAAC,IAaZ,IATA,IAAI2C,EAAcJ,EAAIK,MAGlBC,EAAeH,EAASH,GAKxBE,EAAW,GACNK,EAAI,EAAGA,EAAID,EAAa7C,OAAQ8C,IAAK,CAC1C,IAAIC,EAAMF,EAAaC,GAGvBL,EAAS1B,KAAKgC,IAGdA,EAAMA,EAAIC,SACNjC,KAAK4B,GACTF,EAAS1B,KAAKgC,GAGlB,OAAON,EAKQC,CAASH,GAGpBU,EAAU,GAELH,EAAI,EAAGA,EAAIL,EAASzC,OAAQ8C,IAAK,CAItC,IAHA,IAAII,EAAST,EAASK,GAElBK,EAAM,EACDC,EAAI,EAAGA,EAAIF,EAAOlD,OAAQoD,IAC/BD,GAAOD,EAAOE,GAGdD,IAAQX,GACRS,EAAQlC,KAAKmC,GAIrB,OAAOD,EDqO6BI,CAHJ9C,EACf+C,QAAO,SAACC,GAAsB,OAAMrF,EAAeO,SAAS8E,MAC5DhG,KAAI,SAACgG,GAAsB,OAAKA,EAAO1E,SACG,IAC/CC,QAAQE,IAAI,mBAAoBsD,EAAgBtC,QAC3CsC,EAAgBtC,QACjB2B,GAAiB,MAM7BtE,MAAMC,KAAKD,MAAM,IAAImD,QAAQC,SAAQ,SAAC4B,GAId,KADhBnE,EAAeoF,QAAO,SAACC,GAAsB,OAAKA,EAAOhH,MAAQ8F,EAAW,KACvErC,QACJsB,EAAa7C,SAAS4D,EAAW,KAElCd,GAAgB,SAACpC,GAAc,OAAKA,EAAKC,OAAOiD,EAAW,MAC3DR,GAAmB,GACnB2B,YAAW,kBAAM3B,GAAmB,KAAQ,OAK5B,KADhB3D,EAAeoF,QAAO,SAACC,GAAsB,OAAKA,EAAOrD,MAAQmC,EAAW,KACvErC,QACJwB,EAAa/C,SAAS4D,EAAW,KAElCZ,GAAgB,SAACtC,GAAc,OAAKA,EAAKC,OAAOiD,EAAW,MAC3DN,GAAmB,GACnByB,YAAW,kBAAMzB,GAAmB,KAAQ,YAGrD,CAACxB,EAAYrC,EAAgBoD,EAAcE,IAa1C,eAACR,EAAA,QAAI,CAACZ,MAAO7E,EAAeO,aAAa,UACrC,cAAC,EAAU,IACX,cAAC,QAAK,CAAC2H,QAAS7B,GAAmBE,EAAgB,SAC/C,cAAC,OAAI,CAAC4B,UAAU,EAAMtD,MAAO7E,EAAeS,eAAe,SACvD,cAACgF,EAAA,QAAI,CAACZ,MAAO7E,EAAea,UAAU,SAClC,eAAC,OAAI,CAACuH,SAAS,KAAI,UAAC,eAEf/B,GAAmBA,EACd,eACAA,EACA,MACA,SAAU,IAAI,kCAMpC,cAAC,QAAK,CACF6B,QAAS/B,EACTkC,cAAerI,EAAe4B,SAC9B0G,gBAAiB3B,EAAU,SAE3B,eAAC,OAAI,CAACwB,UAAU,EAAK,UACjB,cAAC,OAAI,UAAC,cACN,cAAC,SAAM,CAACpI,QAAS,kBAAM4G,KAAY,SAAC,iBAG5C,cAAC,UAAc,CACX4B,MAAO,IACPC,OAAQ,CAAEC,GAAI,GAAIC,EAAG,GACrBC,WAAW,EACXC,SAAS,EACTC,IAAKpC,Q,ikBE1VrB,IAAMqC,EAAa,WAGf,OACI,eAACC,EAAA,QAAY,CAAClE,MAAO,CAAEzE,KAAM,GAAI,UAC7B,cAAC,EAAM,IACP,cAAC,UAAO,IACR,cAAC,SAAM,CAACyE,MAAO7E,EAAeG,UAAW6I,MAAM,IAAG,SAC9C,cAAC,EAAQ,UAMV,qBACX,MAA0BnL,IAAMuE,SAAS,SAAQ,WAA1CrE,EAAK,KAAEkL,EAAQ,KAOtB,OACI,qCACI,cAAC,eAAY,CAACC,MAAOC,iBACrB,cAACvL,EAAawL,SAAQ,CAAC9F,MAAO,CAAEvF,QAAOC,YAR3B,WAEhBiL,EAD4B,UAAVlL,EAAoB,OAAS,WAOU,SACjD,cAAC,sBAAmB,OAAKsL,GAAG,IAAEtL,MAAOsL,EAAItL,GAAO,SAC5C,cAAC,EAAU,c","file":"static/js/app.1d977e10.chunk.js","sourcesContent":["import React from \"react\"\nimport * as eva from \"@eva-design/eva\"\nimport {\n  ApplicationProvider,\n  Layout,\n  IconRegistry,\n  Text,\n  Divider\n} from \"@ui-kitten/components\"\nimport { EvaIconsPack } from \"@ui-kitten/eva-icons\"\nimport { SafeAreaView } from \"react-native\"\nimport { TopBar } from \"./TopBar\"\nimport { PlayArea } from \"./PlayArea\"\n\nexport const ThemeContext = React.createContext({\n  theme: 'light',\n  toggleTheme: () => {},\n})\n","import { atom } from \"jotai\"\nimport { atomWithStorage } from \"jotai/utils\"\nimport { SquareDataType, COL_BASE, ROW_COL_BASE } from \"../const\"\n\n// export const activeRowAtom = atom<number>(0)\n// export const activeColAtom = atom<number>(0)\n// export const activeSquaresAtom = atom<number>(0)\n// export const rowLockAtom = atom<boolean>(false)\n// export const colLockAtom = atom<boolean>(false)\n// button trackers\nexport const pressTrackerAtom = atom<SquareDataType[]>([])\nexport const disableTrackerAtom = atom<SquareDataType[]>([])\nexport const allSquaresAtom = atom<SquareDataType[]>([])\n// score\nexport const sessionScoreAtom = atom<number>(0)\nexport const displayScoreAtom = atom<number>(0)\nexport const highScoreAtom = atomWithStorage<number>(\"highScore\", 0)\n// game control\nexport const resetGameFlagAtom = atom<boolean>(false)\n","import React from \"react\"\nimport {\n    Layout,\n    TopNavigation,\n    TopNavigationAction,\n    Icon,\n    Text,\n    IconProps,\n} from \"@ui-kitten/components\"\nimport { ThemeContext } from \"../theme-context\"\nimport { useAtom, useAtomValue, useSetAtom } from \"jotai\"\nimport { displayScoreAtom, highScoreAtom, resetGameFlagAtom } from \"../Atoms\"\nimport { View } from \"react-native\"\n\nconst ThemeIcon = (props: IconProps) => {\n    const themeContext = React.useContext(ThemeContext)\n    return <Icon {...props} name={themeContext.theme === \"light\" ? \"sun\" : \"moon\"} />\n}\n\nconst AwardIcon = (props: IconProps) => {\n    const themeContext = React.useContext(ThemeContext)\n    return <Icon {...props} name=\"award\" />\n}\n\nconst ReloadIcon = (props: IconProps) => {\n    const themeContext = React.useContext(ThemeContext)\n    return <Icon {...props} name=\"refresh\" />\n}\n\nexport const TopBar = () => {\n    const themeContext = React.useContext(ThemeContext)\n    const [displayScore, setDisplayScore] = useAtom(displayScoreAtom)\n    const highScore = useAtomValue(highScoreAtom)\n    const setResetGameFlag = useSetAtom(resetGameFlagAtom)\n\n    const topLeftActions = () => (\n        <React.Fragment>\n            <TopNavigationAction icon={AwardIcon} />\n            <Text>Score: {displayScore}</Text>\n        </React.Fragment>\n    )\n\n    const topRightActions = () => (\n        <React.Fragment>\n            <TopNavigationAction icon={ThemeIcon} onPress={themeContext.toggleTheme} />\n            <TopNavigationAction icon={ReloadIcon} onPress={() => setResetGameFlag(true)} />\n        </React.Fragment>\n    )\n\n    return (\n        <TopNavigation\n            alignment=\"center\"\n            title=\"Ten-Ten\"\n            subtitle={`High-Score ${highScore}`}\n            accessoryLeft={topLeftActions}\n            accessoryRight={topRightActions}\n        />\n    )\n}\n","import { StyleService } from \"@ui-kitten/components\"\n\nexport const playAreaStyles = StyleService.create({\n    container: {\n        flex: 1,\n        flexDirection: \"column\",\n        alignItems: \"stretch\",\n    },\n    subcontainer: {\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        overflowX: \"hidden\",\n    },\n    modalContainer: {\n        margin: 0,\n        borderRadius: 15,\n        borderWidth: 1,\n    },\n    modalView: {\n        padding: 20,\n        borderRadius: 15,\n        borderWidth: 1,\n        backgroundColor: \"color-primary-default\",\n    },\n    row: {\n        flexDirection: \"row\",\n    },\n    column: {\n        flexDirection: \"column\",\n    },\n    square_base: {\n        width: \"39px\",\n        height: \"39px\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        borderWidth: 1,\n        borderRadius: 5,\n        margin: \"1px\",\n    },\n    square_unpressed: {\n        borderColor: \"color-primary-default\",\n        backgroundColor: \"color-primary-transparent-100\",\n        color: \"color-primary-default\",\n    },\n    square_pressed: {\n        borderColor: \"color-success-default\",\n        backgroundColor: \"color-success-transparent-100\",\n        color: \"color-success-default\",\n    },\n    square_disabled: {\n        borderColor: \"color-basic-disabled\",\n        backgroundColor: \"color-basic-transparent-100\",\n        color: \"color-basic-disabled\",\n        cursor: \"default\",\n    },\n    backdrop: {\n        backgroundColor: \"rgba(0, 0, 0, 0.5)\",\n    },\n})\n","export const PLAYAREA_COLS = 10\nexport const PLAYAREA_ROWS = 10\nexport const COL_BASE: boolean[] = Array.from(Array(PLAYAREA_COLS)).map(() => false)\nexport const ROW_COL_BASE: boolean[][] = Array.from(Array(PLAYAREA_ROWS)).map(()=> COL_BASE)\n\nexport type SquareDataType = {\n    row: number,\n    col: number,\n    value: number\n  }","import React from \"react\"\nimport { View, Pressable } from \"react-native\"\nimport { useStyleSheet, Button, Modal, Text, Card } from \"@ui-kitten/components\"\nimport { useAtom, useAtomValue, useSetAtom } from \"jotai\"\nimport { sumEquals } from \"../helpers\"\nimport {\n    allSquaresAtom,\n    displayScoreAtom,\n    disableTrackerAtom,\n    sessionScoreAtom,\n    pressTrackerAtom,\n    highScoreAtom,\n    resetGameFlagAtom,\n} from \"../Atoms\"\nimport { playAreaStyles } from \"../styles\"\nimport { SquareDataType, PLAYAREA_COLS, PLAYAREA_ROWS } from \"../const\"\nimport ConfettiCannon from \"react-native-confetti-cannon\"\n\ninterface SingleSquareProps {\n    data: SquareDataType\n}\nconst SingleSquare = (props: SingleSquareProps) => {\n    const styles = useStyleSheet(playAreaStyles)\n    const [isActive, setIsActive] = React.useState<boolean>(false)\n    const [isDisabled, setIsDisabled] = React.useState<boolean>(false)\n    const [pressTracker, setPressTracker] = useAtom(pressTrackerAtom)\n    const [disableTracker, setDisableTracker] = useAtom(disableTrackerAtom)\n    const [sessionScore, setSessionScore] = useAtom(sessionScoreAtom)\n    const [displayScore, setDisplayScore] = useAtom(displayScoreAtom)\n    const [highScore, setHighScore] = useAtom(highScoreAtom)\n\n    React.useEffect(() => {\n        setIsActive(pressTracker.includes(props.data))\n        setIsDisabled(disableTracker.includes(props.data))\n    }, [pressTracker, props])\n\n    const isPressAboveLimit = React.useCallback(\n        (value: number) => {\n            console.info(\"Score Check\", sessionScore, value)\n            if (sessionScore + value > 10) {\n                console.log(\"Score would pass limit\")\n                return true\n            }\n            return false\n        },\n        [sessionScore]\n    )\n\n    const isPressFullScore = React.useCallback(\n        (value: number) => {\n            console.info(\"Score Check\", sessionScore, value)\n            if (sessionScore + value === 10) {\n                console.log(\"Row/Col completed. Nice.\")\n                return true\n            }\n            return false\n        },\n        [sessionScore]\n    )\n\n    const addToTracker = React.useCallback(\n        (data: SquareDataType) => {\n            setPressTracker((prev: SquareDataType[]) => {\n                const newTracker = [...prev].concat(data)\n                return newTracker\n            })\n        },\n        [setPressTracker, pressTracker, setSessionScore, sessionScore]\n    )\n\n    const delFromTracker = React.useCallback(\n        (data: SquareDataType) => {\n            setSessionScore((prev: number) => prev - data.value)\n            setPressTracker((prev: SquareDataType[]) => {\n                const newTracker = [...prev]\n                const index = newTracker.indexOf(data)\n                newTracker.splice(index, 1)\n                return newTracker\n            })\n        },\n        [setSessionScore, setPressTracker]\n    )\n\n    const increaseScore = React.useCallback(\n        (addScore: number) => {\n            setSessionScore((prev: number) => prev + addScore)\n        },\n        [setSessionScore]\n    )\n\n    const resetScore = React.useCallback(() => {\n        setSessionScore(0)\n    }, [setSessionScore])\n\n    const increaseDisplayScore = React.useCallback(\n        (addScore: number) => {\n            setDisplayScore((prev: number) => prev + addScore)\n            if (displayScore + addScore > highScore) setHighScore(displayScore + addScore)\n        },\n        [setDisplayScore, displayScore, highScore, setHighScore]\n    )\n\n    const checkAndAction = React.useCallback(\n        (data: SquareDataType) => {\n            if (isPressAboveLimit(data.value)) return\n            if (isPressFullScore(data.value)) {\n                console.log(\"disable buttons, update display score, clean pressTracker\")\n                // disable buttons, clean tracker\n                const squaresDone = [...pressTracker].concat(data)\n                setDisableTracker((prev: SquareDataType[]) => prev.concat(squaresDone))\n                setPressTracker([])\n                // Set display score\n                increaseDisplayScore(sessionScore + data.value + squaresDone.length)\n                resetScore()\n                return\n            }\n            addToTracker(data)\n            increaseScore(data.value)\n        },\n        [\n            isPressAboveLimit,\n            isPressFullScore,\n            increaseScore,\n            addToTracker,\n            resetScore,\n            pressTracker,\n            sessionScore,\n        ]\n    )\n\n    const handlePress = React.useCallback(\n        (data: SquareDataType) => {\n            console.log(\n                \"Square Pressed:\",\n                data.value,\n                \"coords:\",\n                data.row,\n                data.col,\n                pressTracker.length\n            )\n            // De-Selection\n            if (pressTracker.includes(data)) {\n                console.log(\"Removing square\")\n                delFromTracker(data)\n                return\n            }\n            // No selections\n            if (!pressTracker.length) {\n                console.log(\"Adding square\")\n                checkAndAction(data)\n                return\n            }\n            // 1 square, can add col or row\n            if (pressTracker.length === 1) {\n                console.log(\"Adding square row/col allowed\")\n                if (pressTracker[0].row === data.row || pressTracker[0].col === data.col) {\n                    checkAndAction(data)\n                }\n                return\n            }\n            console.log(\"Adding square only row or col allowed\")\n            if (pressTracker[0].row === pressTracker[1].row && pressTracker[1].row === data.row) {\n                checkAndAction(data)\n                return\n            }\n            if (pressTracker[0].col === pressTracker[1].col && pressTracker[1].col === data.col) {\n                checkAndAction(data)\n                return\n            }\n        },\n        [pressTracker, setPressTracker]\n    )\n\n    return (\n        <Pressable\n            style={[\n                styles.square_base,\n                isActive\n                    ? styles.square_pressed\n                    : isDisabled\n                    ? styles.square_disabled\n                    : styles.square_unpressed,\n            ]}\n            onPress={() => !isDisabled && handlePress(props.data)}\n        >\n            {props.data.value}\n        </Pressable>\n    )\n}\n\ninterface SquareRowProps {\n    row: number\n}\nconst SquareRow = (props: SquareRowProps) => {\n    const setAllSquares = useSetAtom(allSquaresAtom)\n\n    let allSquares: SquareDataType[] = []\n\n    Array.from(Array(PLAYAREA_COLS).keys()).forEach((index: number) => {\n        const squareValue: number = Math.floor(Math.random() * 10) || 1\n        const squareData: SquareDataType = {\n            row: props.row,\n            col: index + 1,\n            value: squareValue,\n        }\n        allSquares.push(squareData)\n    })\n\n    setAllSquares(allSquares)\n\n    return (\n        <View style={playAreaStyles.row}>\n            <>\n                {allSquares.map((squareData: SquareDataType, index: number) => {\n                    return <SingleSquare key={index} data={squareData} />\n                })}\n            </>\n        </View>\n    )\n}\n\nconst AllSquares = () => {\n    const resetGameFlag = useAtomValue(resetGameFlagAtom)\n    const AllRowsAndCols = React.useMemo(() => {\n        return (\n            <>\n                {Array.from(Array(PLAYAREA_ROWS).keys()).map((index: number) => {\n                    return <SquareRow key={`row-${index}`} row={index + 1} />\n                })}\n            </>\n        )\n    }, [resetGameFlag])\n\n    return <View style={playAreaStyles.column}>{AllRowsAndCols}</View>\n}\n\nexport const PlayArea = () => {\n    const [completedRow, setCompletedRow] = React.useState<number[]>([])\n    const [completedCol, setCompletedCol] = React.useState<number[]>([])\n    const [completedGame, setCompletedGame] = React.useState<boolean>(false)\n    const setPressTracker = useSetAtom(pressTrackerAtom)\n    const [disableTracker, setDisableTracker] = useAtom(disableTrackerAtom)\n    const allSquares = useAtomValue(allSquaresAtom)\n    const setSessionScore = useSetAtom(sessionScoreAtom)\n    const setDisplayScore = useSetAtom(displayScoreAtom)\n    const [resetGameFlag, setResetGameFlag] = useAtom(resetGameFlagAtom)\n    const [modalRowVisible, setModalRowVisible] = React.useState<boolean>(false)\n    const [modalColVisible, setModalColVisible] = React.useState<boolean>(false)\n\n    const confettiRef = React.useRef()\n\n    const resetGame = React.useCallback(() => {\n        setPressTracker([])\n        setDisableTracker([])\n        setSessionScore(0)\n        setDisplayScore(0)\n        setCompletedRow([])\n        setCompletedCol([])\n        console.log(\"Game reset\")\n        setResetGameFlag(false)\n        setCompletedGame(false)\n    }, [])\n\n    React.useEffect(() => {\n        if (resetGameFlag) resetGame()\n    }, [resetGameFlag, resetGame])\n\n    React.useEffect(() => {\n        if (!completedCol.length && !completedRow.length) return\n        if (!confettiRef.current) return\n        confettiRef.current.start()\n    }, [completedCol, completedRow, confettiRef])\n\n    React.useEffect(() => {\n        if (disableTracker.length) {\n            // Any matches still available ?\n            Array.from(Array(10).keys()).forEach((position: number) => {\n                const checkingRow = allSquares\n                    .filter((square: SquareDataType) => !disableTracker.includes(square))\n                    .map((square: SquareDataType) => square.value)\n                const remainingCombos = sumEquals(checkingRow, 10)\n                console.log(\"Remaining Combos\", remainingCombos.length)\n                if (!remainingCombos.length) {\n                    setCompletedGame(true)\n                    return\n                }\n            })\n        }\n\n        Array.from(Array(10).keys()).forEach((position: number) => {\n            // Row completed\n            if (\n                disableTracker.filter((square: SquareDataType) => square.row === position + 1)\n                    .length === 10 &&\n                !completedRow.includes(position + 1)\n            ) {\n                setCompletedRow((prev: number[]) => prev.concat(position + 1))\n                setModalRowVisible(true)\n                setTimeout(() => setModalRowVisible(false), 1500)\n            }\n            // Column completed\n            if (\n                disableTracker.filter((square: SquareDataType) => square.col === position + 1)\n                    .length === 10 &&\n                !completedCol.includes(position + 1)\n            ) {\n                setCompletedCol((prev: number[]) => prev.concat(position + 1))\n                setModalColVisible(true)\n                setTimeout(() => setModalColVisible(false), 1500)\n            }\n        })\n    }, [allSquares, disableTracker, completedRow, completedCol])\n\n    // React.useEffect(() => {\n    //     Array.from(Array(1).keys()).forEach((position: number) => {\n    //         const checkingRow = allSquares\n    //             .filter((square: SquareDataType) => !disableTracker.includes(square))\n    //             .map((square: SquareDataType) => square.value)\n    //         console.info(\"CHECKING\", checkingRow)\n    //         console.log(\"COMBO\", sumEquals(checkingRow, 10))\n    //     })\n    // }, [allSquares, disableTracker])\n\n    return (\n        <View style={playAreaStyles.subcontainer}>\n            <AllSquares />\n            <Modal visible={modalRowVisible || modalColVisible}>\n                <Card disabled={true} style={playAreaStyles.modalContainer}>\n                    <View style={playAreaStyles.modalView}>\n                        <Text category=\"h2\">\n                            🥳\n                            {modalRowVisible && modalRowVisible\n                                ? \"Row & Column\"\n                                : modalRowVisible\n                                ? \"Row\"\n                                : \"Column\"}{\" \"}\n                            Completed 🥳\n                        </Text>\n                    </View>\n                </Card>\n            </Modal>\n            <Modal\n                visible={completedGame}\n                backdropStyle={playAreaStyles.backdrop}\n                onBackdropPress={resetGame}\n            >\n                <Card disabled={true}>\n                    <Text>Game over</Text>\n                    <Button onPress={() => resetGame()}>Restart</Button>\n                </Card>\n            </Modal>\n            <ConfettiCannon\n                count={100}\n                origin={{ x: -20, y: 0 }}\n                autoStart={false}\n                fadeOut={true}\n                ref={confettiRef}\n            />\n        </View>\n    )\n}\n","const powerSet = (arr: number[]) => {\n    // the power set of [] is [[]]\n    if (arr.length === 0) {\n        return [[]]\n    }\n\n    // remove and remember the last element of the array\n    var lastElement = arr.pop()\n\n    // take the powerset of the rest of the array\n    var restPowerset = powerSet(arr)\n\n    // for each set in the power set of arr minus its last element,\n    // include that set in the powerset of arr both with and without\n    // the last element of arr\n    var powerset = []\n    for (let i = 0; i < restPowerset.length; i++) {\n        var set = restPowerset[i]\n\n        // without last element\n        powerset.push(set)\n\n        // with last element\n        set = set.slice() // create a new array that's a copy of set\n        set.push(lastElement)\n        powerset.push(set)\n    }\n\n    return powerset\n}\n\nexport const sumEquals = (arr: number[], number: number) => {\n    // all subsets of arr\n    var powerset = powerSet(arr)\n\n    // subsets summing less than or equal to number\n    var subsets = []\n\n    for (let i = 0; i < powerset.length; i++) {\n        var subset = powerset[i]\n\n        var sum = 0\n        for (var j = 0; j < subset.length; j++) {\n            sum += subset[j]\n        }\n\n        if (sum === number) {\n            subsets.push(subset)\n        }\n    }\n\n    return subsets\n}\n","import React from \"react\"\nimport * as eva from \"@eva-design/eva\"\nimport { ApplicationProvider, IconRegistry, Divider, Layout } from \"@ui-kitten/components\"\nimport { EvaIconsPack } from \"@ui-kitten/eva-icons\"\nimport { SafeAreaView } from \"react-native\"\nimport { TopBar } from \"./TopBar\"\nimport { PlayArea } from \"./PlayArea\"\nimport { ThemeContext } from \"./theme-context\"\nimport { playAreaStyles } from \"./styles\"\n\nconst HomeScreen = () => {\n    const blah = 1\n\n    return (\n        <SafeAreaView style={{ flex: 1 }}>\n            <TopBar />\n            <Divider />\n            <Layout style={playAreaStyles.container} level=\"1\">\n                <PlayArea />\n            </Layout>\n        </SafeAreaView>\n    )\n}\n\nexport default () => {\n    const [theme, setTheme] = React.useState(\"light\")\n\n    const toggleTheme = () => {\n        const nextTheme = theme === \"light\" ? \"dark\" : \"light\"\n        setTheme(nextTheme)\n    }\n\n    return (\n        <>\n            <IconRegistry icons={EvaIconsPack} />\n            <ThemeContext.Provider value={{ theme, toggleTheme }}>\n                <ApplicationProvider {...eva} theme={eva[theme]}>\n                    <HomeScreen />\n                </ApplicationProvider>\n            </ThemeContext.Provider>\n        </>\n    )\n}\n"],"sourceRoot":""}